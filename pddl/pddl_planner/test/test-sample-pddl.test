<launch>
  <!--
  Test program for pddl_planner/demos/sample-pddl/README
  -->
  <test test-name="sample_pddl_ff" pkg="pddl_planner" type="test-sample-pddl.sh"
        args="rosrun ff ff -f $(find pddl_planner)/demos/sample-pddl/sample-problem.pddl -o $(find pddl_planner)/demos/sample-pddl/sample-domain.pddl" />
  <test test-name="sample_pddl_ffha" pkg="pddl_planner" type="test-sample-pddl.sh"
        args="rosrun ffha ffha -f $(find pddl_planner)/demos/sample-pddl/sample-problem.pddl -o $(find pddl_planner)/demos/sample-pddl/sample-domain.pddl" />
  <test test-name="sample_pddl_downward" pkg="pddl_planner" type="test-sample-pddl.sh"
        args="rosrun downward plan $(find pddl_planner)/demos/sample-pddl/sample-domain.pddl $(find pddl_planner)/demos/sample-pddl/sample-problem.pddl ipc seq-sat-lama-2011" />
  <!--
  Test program using ros action node
  -->
  <include file="$(find pddl_planner)/launch/pddl_ff.launch"  ns="ff_planner" />
  <test test-name="sample_pddl_ff_client" pkg="pddl_planner" type="sample-client.py" >
    <remap from="pddl_planner" to="ff_planner/pddl_planner" />
  </test>
  <include file="$(find pddl_planner)/launch/pddl_ffha.launch"  ns="ffha_planner" />
  <test test-name="sample_pddl_ffha_client" pkg="pddl_planner" type="sample-client.py" >
    <remap from="pddl_planner" to="ffha_planner/pddl_planner" />
  </test>
  <include file="$(find pddl_planner)/launch/pddl_downward.launch"  ns="downward_planner" />
  <test test-name="sample_pddl_downward_client" pkg="pddl_planner" type="sample-client.py" >
    <remap from="pddl_planner" to="downward_planner/pddl_planner" />
  </test>
  <!--
  Test program to solve as graph search (https://github.com/jsk-ros-pkg/jsk_planning/pull/92)
  -->
  <test test-name="solve_graph_search" pkg="pddl_planner"
        type="solve-graph-search.l" ns="ffha_planner" />
  <!--
  Test to reproduce jsk-ros-pkg/jsk_demos#1286
  -->
  <include file="$(find pddl_planner)/launch/pddl_downward.launch" ns="downward_planner_long_option" >
    <arg name="planner_option" value="--heuristic &quot;hlm=lmcount(lm_rhw(reasonable_orders=true,lm_cost_type=2,cost_type=2),pref=true)&quot;
                                      --heuristic &quot;hff=ff()&quot;
                                      --search &quot;iterated([lazy_greedy([hff,hlm],preferred=[hff,hlm]),
                                      lazy_wastar([hff,hlm],preferred=[hff,hlm],w=5),
                                      lazy_wastar([hff,hlm],preferred=[hff,hlm],w=3),
                                      lazy_wastar([hff,hlm],preferred=[hff,hlm],w=2)],
                                      repeat_last=false)&quot;" />
  </include>
  <test test-name="sample_pddl_downward_client_long_option" pkg="pddl_planner" type="sample-client.py" >
    <remap from="pddl_planner" to="downward_planner_long_option/pddl_planner" />
  </test>
  <!--
  Test for both &quat; and non-spaces https://github.com/jsk-ros-pkg/jsk_planning/pull/103
  -->
  <include file="$(find pddl_planner)/launch/pddl_downward.launch" ns="downward_planner_long_option_non_spaces" >
    <arg name="planner_option" value="--heuristic hlm=lmcount(lm_rhw(reasonable_orders=true,lm_cost_type=2,cost_type=2),pref=true) --heuristic hff=ff() --search iterated([lazy_greedy([hff,hlm],preferred=[hff,hlm]),lazy_wastar([hff,hlm],preferred=[hff,hlm],w=5),lazy_wastar([hff,hlm],preferred=[hff,hlm],w=3),lazy_wastar([hff,hlm],preferred=[hff,hlm],w=2)],repeat_last=false)" />
  </include>
  <test test-name="sample_pddl_downward_client_long_option_non_spaces" pkg="pddl_planner" type="sample-client.py" >
    <remap from="pddl_planner" to="downward_planner_long_option_non_spaces/pddl_planner" />
  </test>
</launch>
